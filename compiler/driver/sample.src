// fn fib(n: isize) -> isize {
//     if n <= 1 {
//         return n;
//     }
//     fib(n - 1) + fib(n - 2)
// }

// fn fib_loop(mut n: isize) -> isize {
//     let mut a = 1;
//     let mut b = 1;

//     loop {
//         if n <= 0 {
//             break b;
//         }

//         let tmp = n * 0 + a; // n * 0 to infer tmp as `isize`
//         a = b;
//         b = tmp + b;
//         n = n - 1;
//     }
// }

// fn infer(y: i16) -> isize {
//     let mut x = 12;
//     x = 13;
//     12
// }

// #[start]
// fn main(x: isize, y: isize) -> isize {
//     0
// }

#[start]
fn main(a: isize, b: isize) -> isize {
    if a == 338 {
        return 0;
    } else {
        (a + b / (0 + 1));
    }
}